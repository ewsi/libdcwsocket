/*
* Copyright (c) 2018 Cable Television Laboratories, Inc. ("CableLabs")
*                    and others.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at:
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by Jon Dennis (j.dennis@cablelabs.com)
*/


#include "./dcwsocket.h"


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <linux/if_packet.h>
#include <linux/if_ether.h>
#include <linux/filter.h>
#include <arpa/inet.h>


#define ETHER_HEADERSIZE  14
#define CL3_HEADERSIZE    4
#define MAX_PAYLOAD       (1500 - CL3_HEADERSIZE)
#define MAX_FRAMESIZE     (MAX_PAYLOAD + ETHER_HEADERSIZE)
#define DCW_ETHER_TYPE    0xB4E3
#define MIN_FRAMESIZE     64



/* 

  to generate the packet filter:
  $ sudo tcpdump -s 1514 -d ether proto 0xB4E3
  $ sudo tcpdump -s 1514 -dd ether proto 0xB4E3

  the somewhat human readable version of the packet filter:
  (000) ldh      [12]
  (001) jeq      #0xb4e3          jt 2    jf 3
  (002) ret      #1514
  (003) ret      #0

  the human readable version of the packet filter:
  (000) load half-word from frame byte-offset 12 (the ether type)
  (001) if the loaded half-word equals 0xb4e3, just to 2, else jump to 3
  (002) return up to 1514 bytes back to user-space
  (003) return 0 (meaning dont return back to user-space)

  the machine version of the actual packet filter:
  { 0x28, 0, 0, 0x0000000c },
  { 0x15, 0, 1, 0x0000b4e3 },
  { 0x6, 0, 0, 0x000005ea },
  { 0x6, 0, 0, 0x00000000 },
*/
static struct sock_filter _dcw_filter[] = {
  { 0x28, 0, 0, 0x0000000c },
  { 0x15, 0, 1, DCW_ETHER_TYPE },  /* modified for configurable macros */
  { 0x6, 0, 0, MAX_FRAMESIZE },    /* modified for configurable macros */
  { 0x6, 0, 0, 0x00000000 },
};


struct dcw_socket {
  int fd;
  char ifmacaddr[6];
};



dcw_socket_t
dcwsock_open(const char * const ifname) {
  struct ifreq ifr;
  struct sockaddr_ll sall;
  struct sock_fprog sfp;
  dcw_socket_t rv;

  /* allocate our socket struct */
  rv = malloc(sizeof(*rv));
  if (rv == NULL) {
    perror("malloc(dcw_socket_t) failed");
    goto failed;
  }

  /* sanitize our data structs... defensive */
  memset(rv, 0, sizeof(*rv));
  memset(&ifr, 0, sizeof(ifr));
  memset(&sall, 0, sizeof(sall));
  memset(&sfp, 0, sizeof(sfp));

  /* open a raw socket... "ETH_P_ALL" says take EVERYTHING 
     (this means that it is IMPERATIVE to apply a filter)
  */
  rv->fd = socket(AF_PACKET, SOCK_RAW, ETH_P_ALL);
  if (rv->fd == -1) {
    perror("socket(AF_PACKET, SOCK_RAW, ETH_P_ALL) failed");
    goto failed;
  }

  /* lookup the MAC address for the given interface */
  strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
  if((ioctl(rv->fd, SIOCGIFHWADDR, &ifr)) == -1) {
    fprintf(stderr, "Failed to get MAC address for interface: %s\n", ifname);
    goto failed;
  }
  memcpy(rv->ifmacaddr, ifr.ifr_addr.sa_data, sizeof(rv->ifmacaddr));

  /* lookup the index for the given interface by name */
  strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
  if((ioctl(rv->fd, SIOCGIFINDEX, &ifr)) == -1) {
    fprintf(stderr, "Failed to get index for interface: %s\n", ifname);
    goto failed;
  }

  /* install the filter */
  sfp.len = sizeof(_dcw_filter) / sizeof(_dcw_filter[0]);
  sfp.filter = _dcw_filter;
  if (setsockopt(rv->fd, SOL_SOCKET, SO_ATTACH_FILTER, &sfp, sizeof(sfp)) == -1) {
    perror("Failed to set DCW socket filter.\n");
    goto failed;
  }

  /* bind the socket to the interface index */
  sall.sll_family = AF_PACKET;
  sall.sll_ifindex = ifr.ifr_ifindex;
  sall.sll_protocol = htons(ETH_P_ALL);
  if (bind(rv->fd, (void*)&sall, sizeof(sall)) == -1) {
    fprintf(stderr, "Failed to bind() to interface: %s\n", ifname);
    goto failed;
  }

  return rv; /* success */

failed:
  dcwsock_close(rv);
  return NULL;
}

void
dcwsock_close(dcw_socket_t s) {
  if (s != NULL) {
    close(s->fd);
    free(s);
  }
}


static const unsigned char
_cl3_header[] = {
  0x11,        /* first nybble = version (1); second nybble = header size (1 = 4 bytes) */
  0x00,        /* RFU */
  0x00, 0xDC   /* DCW protocol id = 0x00DC */
};

int
dcwsock_send( dcw_socket_t s, const void * const buf, const unsigned buf_size, const unsigned char * const dest_macaddr ) {
  char txbuf[MAX_FRAMESIZE];
  ssize_t rv;
  size_t write_size;
  size_t overhead_size; /* ethernet header + CL3 header + padding */

  if (buf_size > MAX_PAYLOAD) {
    fprintf(stderr, "Can not send a DCW message > %u bytes!\n", MAX_PAYLOAD);
    return -1;
  }

  /* populate the 14-byte ethernet II frame header... */
  /* destination MAC address */
  if (dest_macaddr == NULL) {
    /* no destination specified... goto broadcast by default */
    memset(txbuf, 0xFF, 6);
  }
  else {
    memcpy(txbuf, dest_macaddr, 6);
  }
  /* source MAC address */
  memcpy(&txbuf[6], s->ifmacaddr, sizeof(s->ifmacaddr));
  /* ethernet type */
  txbuf[12] = (DCW_ETHER_TYPE >> 8);
  txbuf[13] = (DCW_ETHER_TYPE & 0xFF);

  /* populate the 4-byte CL3 header */
  memcpy(&txbuf[14], _cl3_header, sizeof(_cl3_header));

  /* copy the payload buffer */
  memcpy(&txbuf[18], buf, buf_size);

  /* do we have enough buffer to meet the minimum size? */
  overhead_size = ETHER_HEADERSIZE + CL3_HEADERSIZE;
  write_size = buf_size + overhead_size;
  if (write_size < MIN_FRAMESIZE) {
    /* pad the remainder of the packet with 0xFF's */
    memset(&txbuf[write_size], 0xFF, MIN_FRAMESIZE - write_size);
    overhead_size += MIN_FRAMESIZE - write_size;
    write_size = MIN_FRAMESIZE;
  }

  /* fire it off... */
  rv = write(s->fd, txbuf, write_size);
  if (rv == -1) return -1;
  if (rv < overhead_size) return 0;
  return (rv - overhead_size);
}

static const unsigned char _bcast_macaddr[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

int
dcwsock_recv( dcw_socket_t s, void * const buf, const unsigned buf_size, unsigned char * const src_macaddr ) {
  ssize_t rv;
  char rxbuf[MAX_FRAMESIZE];
  unsigned short cl3_protocol;
  unsigned short cl3_header_len;

  cl3_protocol   = 0;
  cl3_header_len = 0;

  /* get a frame from the kernel */
  rv = read(s->fd, rxbuf, sizeof(rxbuf));
  if (rv == -1) {
    perror("DCW read() failed");
    return -1;
  }
  if (rv < 14) return -1; /* something is really screwed at this point */

  /* populate sender if requested */
  if (src_macaddr != NULL) {
    memcpy(src_macaddr, rxbuf + 6, 6);
  }

  /* is this frame destined for us? */
  if (memcmp(rxbuf, s->ifmacaddr, sizeof(s->ifmacaddr)) != 0) {
    /* no... ok.. broadcast? */
    if (memcmp(rxbuf, _bcast_macaddr, sizeof(_bcast_macaddr)) != 0) {
      return 0; /* not for us... */
    }
  }

  /* parse the CL3 header */
  if (rv < 18) return 0; /* need at least 18-bytes; 14-bytes ethernet + 4-bytes minimum for CL3 header */
  cl3_header_len  = (unsigned char)rxbuf[14];
  cl3_header_len &= 0x0F;
  cl3_header_len *= 4;

  if (rv < (14 + cl3_header_len)) return 0; /* ensure that the captured packet include the entire CL3 header */
  if (cl3_header_len < 4) return 0; /* something is corrupt... CL3 header must be at minimum 4-bytes... drop this packet */

  cl3_protocol    = (unsigned char)rxbuf[16];
  cl3_protocol  <<= 8;
  cl3_protocol   |= (unsigned char)rxbuf[17];

  /* not the best for performance here, but we aint targeting packets 
     firing along at blazing speeds */
  rv -= 14;              /* deduct the ethernet header */
  rv -= cl3_header_len;  /* deduct the cl3 header */
  if (rv > buf_size) rv = buf_size;
  memcpy(buf, rxbuf + 14 + cl3_header_len, rv);
  return rv;
}


void dcwsock_get_macaddr(dcw_socket_t s, unsigned char * const output) {
  memcpy(output, s->ifmacaddr, sizeof(s->ifmacaddr));
}

int dcwsock_get_fd(dcw_socket_t s) {
  return s->fd;
}




